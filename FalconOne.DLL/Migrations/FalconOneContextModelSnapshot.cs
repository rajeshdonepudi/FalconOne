// <auto-generated />
using System;
using FalconOne.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FalconOne.DAL.Migrations
{
    [DbContext(typeof(FalconOneContext))]
    partial class FalconOneContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FalconOne.Models.Entities.AbsenceAndLeavePolicy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaximumPersonalLeaveDaysPerYear")
                        .HasColumnType("int");

                    b.Property<int>("MaximumSickLeaveDaysPerYear")
                        .HasColumnType("int");

                    b.Property<int>("MaximumUnpaidLeaveDaysPerYear")
                        .HasColumnType("int");

                    b.Property<int>("MaximumVacationDaysPerYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AbsenceAndLeavePolicies");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AddressType")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HouseNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationType")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Addressess");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.AttendanceCaptureMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttendanceCaptureSchemeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MethodType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AttendanceCaptureSchemeId");

                    b.ToTable("AttendanceCaptureMethods");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.AttendanceCaptureScheme", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequiresAttendanceApproval")
                        .HasColumnType("bit");

                    b.Property<bool>("RequiresTimeTracking")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("AttendanceCaptureSchemes");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.AttendanceTrackingPolicy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AbsenceAndLeavePoliciesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BreakAndMealPeriodsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("EarlyDepartureThresHold")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("GracePeriod")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("LateArrivalThreshold")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RemoteWorkAllowed")
                        .HasColumnType("bit");

                    b.Property<int>("RemoteWorkEligibilityCriteriaCriteriaId")
                        .HasColumnType("int");

                    b.Property<bool>("RequiresTimeTracking")
                        .HasColumnType("bit");

                    b.Property<int>("WorkHours")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AbsenceAndLeavePoliciesId");

                    b.HasIndex("BreakAndMealPeriodsId");

                    b.HasIndex("RemoteWorkEligibilityCriteriaCriteriaId");

                    b.ToTable("AttendanceTrackingPolicies");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.BreakAndMealPeriod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("BreakDuration")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("MealDuration")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("BreakAndMealPeriods");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.BusinessUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LegalEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LegalEntityId");

                    b.ToTable("BusinessUnits");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CommentedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CommentedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CommentedById");

                    b.HasIndex("PostId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.ContactDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResidencePhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContactDetails");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThreeCharCountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwoCharCountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProfilePictureId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProfilePictureId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.Designation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LegalEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LegalEntityId");

                    b.ToTable("Designations");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.EmployeeShift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ShiftAllowancePolicyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ShiftDuration")
                        .HasColumnType("int");

                    b.Property<int>("ShiftType")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ShiftAllowancePolicyId");

                    b.ToTable("EmployeeShifts");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.EmployeeSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AboutJob")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmployeeSummaries");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.EmployeeTime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttendanceCaptureSchemeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttendanceNumber")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttendanceTrackingPolicyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeShiftId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HolidayCalendarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HolidayCalenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LeavePlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OverTimePolicyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShiftAllowancePolicyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShiftWeeklyOffRuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WeekOffPolicyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WeeklyOffPolicyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AttendanceCaptureSchemeId");

                    b.HasIndex("AttendanceTrackingPolicyId");

                    b.HasIndex("EmployeeShiftId");

                    b.HasIndex("HolidayCalendarId");

                    b.HasIndex("LeavePlanId");

                    b.HasIndex("OverTimePolicyId");

                    b.HasIndex("ShiftAllowancePolicyId");

                    b.HasIndex("ShiftWeeklyOffRuleId");

                    b.HasIndex("WeekOffPolicyId");

                    b.ToTable("EmployeeTimes");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.Experience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmploymentType")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EndPreviousPosition")
                        .HasColumnType("bit");

                    b.Property<string>("Industry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCurrentJob")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationType")
                        .HasColumnType("int");

                    b.Property<string>("ProfileHeadline")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Experiences");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.Hobby", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EmployeeSummaryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeSummaryId");

                    b.ToTable("Hobbies");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.Holiday", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CalendarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HolidayCalendarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HolidayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HolidayCalendarId");

                    b.ToTable("Holidays");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.HolidayCalendar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("HolidayCalendars");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid?>("MediaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MediaId");

                    b.HasIndex("PostId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.Interest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EmployeeSummaryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeSummaryId");

                    b.ToTable("Interests");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.JobDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfJoining")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeBand")
                        .HasColumnType("int");

                    b.Property<int>("EmploymentType")
                        .HasColumnType("int");

                    b.Property<int>("PayGrade")
                        .HasColumnType("int");

                    b.Property<int>("TimeType")
                        .HasColumnType("int");

                    b.Property<int>("WorkerType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("JobDetails");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.LeavePlan", b =>
                {
                    b.Property<Guid>("LeavePlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RemainingLeaveDays")
                        .HasColumnType("int");

                    b.Property<int>("TotalLeaveDays")
                        .HasColumnType("int");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("LeavePlanId");

                    b.ToTable("LeavePlans");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.LeaveType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AbsenceAndLeavePolicyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AbsenceAndLeavePolicyId");

                    b.ToTable("LeaveTypes");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.LegalEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BusinessType")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyIdentificationNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfIncorporation")
                        .HasColumnType("datetime2");

                    b.Property<string>("LegalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NatureOfBusiness")
                        .HasColumnType("int");

                    b.Property<int>("Sector")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("LegalEntity");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BusinessUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessUnitId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.Media", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ExperienceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MediaType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExperienceId");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.Metadata", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MetadataGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MetadataGroupId");

                    b.ToTable("Metadatas");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.MetadataGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Classification")
                        .HasColumnType("int");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("MetadataGroups");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.Navigation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationClaimId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationClaimId");

                    b.HasIndex("TenantId");

                    b.ToTable("Navigation");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.OverTimeAuthorization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApprovedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ApprovedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApproverComments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<Guid>("RequestedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RequestedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("RequestedById");

                    b.ToTable("OverTimeAuthorizations");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.OverTimePolicy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OverTimeAuthorizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("OverTimeRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<TimeSpan>("OverTimeThreshold")
                        .HasColumnType("time");

                    b.Property<int>("OvertimeCalculationMethod")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OverTimeAuthorizationId");

                    b.ToTable("OverTimePolicies");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.PolicyDay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PolicyDays");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PostedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PostedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PostedById");

                    b.HasIndex("TenantId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.Reaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReactedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReactionOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReactionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("ReactedById");

                    b.ToTable("Reactions");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.RemoteWorkEligibilityCriteria", b =>
                {
                    b.Property<int>("CriteriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CriteriaId"));

                    b.Property<string>("CriteriaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequiresApproval")
                        .HasColumnType("bit");

                    b.HasKey("CriteriaId");

                    b.ToTable("RemoteWorkEligibilityCriteria");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.SecurityClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationPolicyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationPolicyId");

                    b.HasIndex("TenantId");

                    b.ToTable("SecurityClaims");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.SecurityPolicy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("SecurityPolicies");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.SecurityRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.HasIndex("TenantId");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("FalconOne.Models.Entities.ShiftAllowancePolicy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AllowanceAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPercentage")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ShiftAllowancePolicies");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.ShiftWeeklyOffRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EmployeeShiftId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShiftDurationInHours")
                        .HasColumnType("int");

                    b.Property<int>("WeeklyOffDay")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeShiftId");

                    b.ToTable("ShiftWeeklyOffRules");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.SiteSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SettingType")
                        .HasColumnType("int");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("SiteSettings");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExperienceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExperienceId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.SystemLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<string>("Protocol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RecordedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResourceCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Scheme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TraceIdentifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("SystemLogs");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountAlias")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("'FOTEN' + CAST([AccountId] AS nvarchar(max))");

                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProfilePictureId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProfilePictureId");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.TenantUser", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TenantId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TenantUser");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.TimeEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DayType")
                        .HasColumnType("int");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LocationId");

                    b.HasIndex("UserId");

                    b.ToTable("AttendanceLogs");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.TimeLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AttendanceLogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("In")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Out")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AttendanceLogId");

                    b.ToTable("TimeLogs");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ProfilePictureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ResourceAlias")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("'FOUSR' + CAST([ResourceId] AS nvarchar(max))");

                    b.Property<int>("ResourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResourceId"));

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasAlternateKey("ResourceId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ProfilePictureId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("FalconOne.Models.Entities.WeekOffPolicy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WeekOffPolicies");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("Name")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PolicyDayWeekOffPolicy", b =>
                {
                    b.Property<Guid>("PolicyDaysId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WeekOffPoliciesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PolicyDaysId", "WeekOffPoliciesId");

                    b.HasIndex("WeekOffPoliciesId");

                    b.ToTable("PolicyDayWeekOffPolicy");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.Employee", b =>
                {
                    b.HasBaseType("FalconOne.Models.Entities.User");

                    b.Property<int>("BloodGroup")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DesignationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EmployeeSummaryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<Guid?>("JobDetailsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaritalStatus")
                        .HasColumnType("int");

                    b.Property<bool>("PhysicallyChallenged")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProfessionalSummary")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("DesignationId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeeSummaryId");

                    b.HasIndex("JobDetailsId");

                    b.HasIndex("PostId");

                    b.HasDiscriminator().HasValue("Employee");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.Address", b =>
                {
                    b.HasOne("FalconOne.Models.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FalconOne.Models.Entities.Employee", "Employee")
                        .WithMany("Addresses")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.AttendanceCaptureMethod", b =>
                {
                    b.HasOne("FalconOne.Models.Entities.AttendanceCaptureScheme", "AttendanceCaptureScheme")
                        .WithMany("CaptureMethods")
                        .HasForeignKey("AttendanceCaptureSchemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttendanceCaptureScheme");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.AttendanceTrackingPolicy", b =>
                {
                    b.HasOne("FalconOne.Models.Entities.AbsenceAndLeavePolicy", "AbsenceAndLeavePolicies")
                        .WithMany()
                        .HasForeignKey("AbsenceAndLeavePoliciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FalconOne.Models.Entities.BreakAndMealPeriod", "BreakAndMealPeriods")
                        .WithMany()
                        .HasForeignKey("BreakAndMealPeriodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FalconOne.Models.Entities.RemoteWorkEligibilityCriteria", "RemoteWorkEligibilityCriteria")
                        .WithMany()
                        .HasForeignKey("RemoteWorkEligibilityCriteriaCriteriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AbsenceAndLeavePolicies");

                    b.Navigation("BreakAndMealPeriods");

                    b.Navigation("RemoteWorkEligibilityCriteria");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.BusinessUnit", b =>
                {
                    b.HasOne("FalconOne.Models.Entities.LegalEntity", "LegalEntity")
                        .WithMany("BusinessUnits")
                        .HasForeignKey("LegalEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LegalEntity");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.Comment", b =>
                {
                    b.HasOne("FalconOne.Models.Entities.User", "CommentedBy")
                        .WithMany()
                        .HasForeignKey("CommentedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FalconOne.Models.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId");

                    b.Navigation("CommentedBy");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.ContactDetail", b =>
                {
                    b.HasOne("FalconOne.Models.Entities.Employee", "Employee")
                        .WithOne("ContactDetails")
                        .HasForeignKey("FalconOne.Models.Entities.ContactDetail", "Id");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.Department", b =>
                {
                    b.HasOne("FalconOne.Models.Entities.Location", "Location")
                        .WithMany("Departments")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FalconOne.Models.Entities.Image", "ProfilePicture")
                        .WithMany()
                        .HasForeignKey("ProfilePictureId");

                    b.Navigation("Location");

                    b.Navigation("ProfilePicture");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.Designation", b =>
                {
                    b.HasOne("FalconOne.Models.Entities.LegalEntity", null)
                        .WithMany("Designations")
                        .HasForeignKey("LegalEntityId");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.EmployeeShift", b =>
                {
                    b.HasOne("FalconOne.Models.Entities.ShiftAllowancePolicy", null)
                        .WithMany("Shifts")
                        .HasForeignKey("ShiftAllowancePolicyId");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.EmployeeTime", b =>
                {
                    b.HasOne("FalconOne.Models.Entities.AttendanceCaptureScheme", "AttendanceCaptureScheme")
                        .WithMany("EmployeeTimes")
                        .HasForeignKey("AttendanceCaptureSchemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FalconOne.Models.Entities.AttendanceTrackingPolicy", "AttendanceTrackingPolicy")
                        .WithMany("EmployeeTimes")
                        .HasForeignKey("AttendanceTrackingPolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FalconOne.Models.Entities.EmployeeShift", "EmployeeShift")
                        .WithMany("EmployeeTimes")
                        .HasForeignKey("EmployeeShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FalconOne.Models.Entities.HolidayCalendar", "HolidayCalendar")
                        .WithMany("EmployeeTimes")
                        .HasForeignKey("HolidayCalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FalconOne.Models.Entities.LeavePlan", "LeavePlan")
                        .WithMany("EmployeeTimes")
                        .HasForeignKey("LeavePlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FalconOne.Models.Entities.OverTimePolicy", "OverTimePolicy")
                        .WithMany("EmployeeTimes")
                        .HasForeignKey("OverTimePolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FalconOne.Models.Entities.ShiftAllowancePolicy", "ShiftAllowancePolicy")
                        .WithMany("EmployeeTimes")
                        .HasForeignKey("ShiftAllowancePolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FalconOne.Models.Entities.ShiftWeeklyOffRule", "ShiftWeeklyOffRule")
                        .WithMany("EmployeeTimes")
                        .HasForeignKey("ShiftWeeklyOffRuleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FalconOne.Models.Entities.WeekOffPolicy", "WeekOffPolicy")
                        .WithMany("EmployeeTimes")
                        .HasForeignKey("WeekOffPolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttendanceCaptureScheme");

                    b.Navigation("AttendanceTrackingPolicy");

                    b.Navigation("EmployeeShift");

                    b.Navigation("HolidayCalendar");

                    b.Navigation("LeavePlan");

                    b.Navigation("OverTimePolicy");

                    b.Navigation("ShiftAllowancePolicy");

                    b.Navigation("ShiftWeeklyOffRule");

                    b.Navigation("WeekOffPolicy");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.Hobby", b =>
                {
                    b.HasOne("FalconOne.Models.Entities.EmployeeSummary", "EmployeeSummary")
                        .WithMany("EmployeeHobbies")
                        .HasForeignKey("EmployeeSummaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeSummary");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.Holiday", b =>
                {
                    b.HasOne("FalconOne.Models.Entities.HolidayCalendar", "HolidayCalendar")
                        .WithMany("Holidays")
                        .HasForeignKey("HolidayCalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HolidayCalendar");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.Image", b =>
                {
                    b.HasOne("FalconOne.Models.Entities.Media", null)
                        .WithMany("Photos")
                        .HasForeignKey("MediaId");

                    b.HasOne("FalconOne.Models.Entities.Post", "Post")
                        .WithMany("Images")
                        .HasForeignKey("PostId");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.Interest", b =>
                {
                    b.HasOne("FalconOne.Models.Entities.EmployeeSummary", "EmployeeSummary")
                        .WithMany("EmployeeInterests")
                        .HasForeignKey("EmployeeSummaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeSummary");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.LeaveType", b =>
                {
                    b.HasOne("FalconOne.Models.Entities.AbsenceAndLeavePolicy", null)
                        .WithMany("AdditionalLeaveTypes")
                        .HasForeignKey("AbsenceAndLeavePolicyId");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.LegalEntity", b =>
                {
                    b.HasOne("FalconOne.Models.Entities.Tenant", "Tenant")
                        .WithMany("LegalEntities")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.Location", b =>
                {
                    b.HasOne("FalconOne.Models.Entities.BusinessUnit", "BusinessUnit")
                        .WithMany("Locations")
                        .HasForeignKey("BusinessUnitId");

                    b.Navigation("BusinessUnit");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.Media", b =>
                {
                    b.HasOne("FalconOne.Models.Entities.Experience", "Experience")
                        .WithMany("Media")
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Experience");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.Metadata", b =>
                {
                    b.HasOne("FalconOne.Models.Entities.MetadataGroup", "MetadataGroup")
                        .WithMany("Metadatas")
                        .HasForeignKey("MetadataGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MetadataGroup");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.MetadataGroup", b =>
                {
                    b.HasOne("FalconOne.Models.Entities.Employee", null)
                        .WithMany("AdditionalInfo")
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.Navigation", b =>
                {
                    b.HasOne("FalconOne.Models.Entities.SecurityClaim", "ApplicationClaim")
                        .WithMany("Navigations")
                        .HasForeignKey("ApplicationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FalconOne.Models.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("ApplicationClaim");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.OverTimeAuthorization", b =>
                {
                    b.HasOne("FalconOne.Models.Entities.Employee", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FalconOne.Models.Entities.Employee", "RequestedBy")
                        .WithMany("OverTimeAuthorizations")
                        .HasForeignKey("RequestedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApprovedBy");

                    b.Navigation("RequestedBy");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.OverTimePolicy", b =>
                {
                    b.HasOne("FalconOne.Models.Entities.OverTimeAuthorization", "OverTimeAuthorization")
                        .WithMany()
                        .HasForeignKey("OverTimeAuthorizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OverTimeAuthorization");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.Post", b =>
                {
                    b.HasOne("FalconOne.Models.Entities.Department", "Department")
                        .WithMany("Posts")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("FalconOne.Models.Entities.Employee", "PostedBy")
                        .WithMany()
                        .HasForeignKey("PostedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FalconOne.Models.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Department");

                    b.Navigation("PostedBy");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.Reaction", b =>
                {
                    b.HasOne("FalconOne.Models.Entities.Post", "Post")
                        .WithMany("Reactions")
                        .HasForeignKey("PostId");

                    b.HasOne("FalconOne.Models.Entities.User", "ReactedBy")
                        .WithMany()
                        .HasForeignKey("ReactedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("ReactedBy");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.SecurityClaim", b =>
                {
                    b.HasOne("FalconOne.Models.Entities.SecurityPolicy", "ApplicationPolicy")
                        .WithMany("PolicyClaims")
                        .HasForeignKey("ApplicationPolicyId");

                    b.HasOne("FalconOne.Models.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("ApplicationPolicy");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.SecurityPolicy", b =>
                {
                    b.HasOne("FalconOne.Models.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.SecurityRole", b =>
                {
                    b.HasOne("FalconOne.Models.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.ShiftWeeklyOffRule", b =>
                {
                    b.HasOne("FalconOne.Models.Entities.EmployeeShift", "EmployeeShift")
                        .WithMany()
                        .HasForeignKey("EmployeeShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeShift");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.SiteSetting", b =>
                {
                    b.HasOne("FalconOne.Models.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.Skill", b =>
                {
                    b.HasOne("FalconOne.Models.Entities.Experience", "Experience")
                        .WithMany("Skills")
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Experience");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.SystemLog", b =>
                {
                    b.HasOne("FalconOne.Models.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.Tenant", b =>
                {
                    b.HasOne("FalconOne.Models.Entities.Image", "ProfilePicture")
                        .WithMany()
                        .HasForeignKey("ProfilePictureId");

                    b.Navigation("ProfilePicture");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.TenantUser", b =>
                {
                    b.HasOne("FalconOne.Models.Entities.Tenant", "Tenant")
                        .WithMany("Users")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FalconOne.Models.Entities.User", "User")
                        .WithMany("TenantUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.TimeEntry", b =>
                {
                    b.HasOne("FalconOne.Models.Entities.Employee", null)
                        .WithMany("TimeEntries")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("FalconOne.Models.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("FalconOne.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.TimeLog", b =>
                {
                    b.HasOne("FalconOne.Models.Entities.TimeEntry", "AttendanceLog")
                        .WithMany("TimeLogs")
                        .HasForeignKey("AttendanceLogId");

                    b.Navigation("AttendanceLog");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.User", b =>
                {
                    b.HasOne("FalconOne.Models.Entities.Image", "ProfilePicture")
                        .WithMany()
                        .HasForeignKey("ProfilePictureId");

                    b.OwnsMany("FalconOne.Models.Entities.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<DateTime>("Created")
                                .HasColumnType("datetime2");

                            b1.Property<string>("CreatedByIp")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Expires")
                                .HasColumnType("datetime2");

                            b1.Property<string>("ReasonRevoked")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ReplacedByToken")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime?>("Revoked")
                                .HasColumnType("datetime2");

                            b1.Property<string>("RevokedByIp")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Token")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("Id");

                            b1.HasIndex("UserId");

                            b1.ToTable("RefreshTokens");

                            b1.WithOwner("User")
                                .HasForeignKey("UserId");

                            b1.Navigation("User");
                        });

                    b.Navigation("ProfilePicture");

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("FalconOne.Models.Entities.SecurityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("FalconOne.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("FalconOne.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("FalconOne.Models.Entities.SecurityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FalconOne.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("FalconOne.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PolicyDayWeekOffPolicy", b =>
                {
                    b.HasOne("FalconOne.Models.Entities.PolicyDay", null)
                        .WithMany()
                        .HasForeignKey("PolicyDaysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FalconOne.Models.Entities.WeekOffPolicy", null)
                        .WithMany()
                        .HasForeignKey("WeekOffPoliciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FalconOne.Models.Entities.Employee", b =>
                {
                    b.HasOne("FalconOne.Models.Entities.Designation", "Designation")
                        .WithMany()
                        .HasForeignKey("DesignationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FalconOne.Models.Entities.Employee", null)
                        .WithMany("ReportingManagers")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("FalconOne.Models.Entities.EmployeeSummary", "EmployeeSummary")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeSummaryId");

                    b.HasOne("FalconOne.Models.Entities.JobDetail", "JobDetails")
                        .WithMany("Employees")
                        .HasForeignKey("JobDetailsId");

                    b.HasOne("FalconOne.Models.Entities.Post", null)
                        .WithMany("TaggedEmployees")
                        .HasForeignKey("PostId");

                    b.Navigation("Designation");

                    b.Navigation("EmployeeSummary");

                    b.Navigation("JobDetails");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.AbsenceAndLeavePolicy", b =>
                {
                    b.Navigation("AdditionalLeaveTypes");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.AttendanceCaptureScheme", b =>
                {
                    b.Navigation("CaptureMethods");

                    b.Navigation("EmployeeTimes");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.AttendanceTrackingPolicy", b =>
                {
                    b.Navigation("EmployeeTimes");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.BusinessUnit", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.Department", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.EmployeeShift", b =>
                {
                    b.Navigation("EmployeeTimes");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.EmployeeSummary", b =>
                {
                    b.Navigation("EmployeeHobbies");

                    b.Navigation("EmployeeInterests");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.Experience", b =>
                {
                    b.Navigation("Media");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.HolidayCalendar", b =>
                {
                    b.Navigation("EmployeeTimes");

                    b.Navigation("Holidays");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.JobDetail", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.LeavePlan", b =>
                {
                    b.Navigation("EmployeeTimes");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.LegalEntity", b =>
                {
                    b.Navigation("BusinessUnits");

                    b.Navigation("Designations");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.Location", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.Media", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.MetadataGroup", b =>
                {
                    b.Navigation("Metadatas");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.OverTimePolicy", b =>
                {
                    b.Navigation("EmployeeTimes");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Images");

                    b.Navigation("Reactions");

                    b.Navigation("TaggedEmployees");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.SecurityClaim", b =>
                {
                    b.Navigation("Navigations");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.SecurityPolicy", b =>
                {
                    b.Navigation("PolicyClaims");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.ShiftAllowancePolicy", b =>
                {
                    b.Navigation("EmployeeTimes");

                    b.Navigation("Shifts");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.ShiftWeeklyOffRule", b =>
                {
                    b.Navigation("EmployeeTimes");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.Tenant", b =>
                {
                    b.Navigation("LegalEntities");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.TimeEntry", b =>
                {
                    b.Navigation("TimeLogs");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.User", b =>
                {
                    b.Navigation("TenantUsers");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.WeekOffPolicy", b =>
                {
                    b.Navigation("EmployeeTimes");
                });

            modelBuilder.Entity("FalconOne.Models.Entities.Employee", b =>
                {
                    b.Navigation("AdditionalInfo");

                    b.Navigation("Addresses");

                    b.Navigation("ContactDetails")
                        .IsRequired();

                    b.Navigation("OverTimeAuthorizations");

                    b.Navigation("ReportingManagers");

                    b.Navigation("TimeEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
